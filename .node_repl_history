    return true;
    }
        }
            free(tmp);
            cursor = cursor->next;
            tmp = cursor;
        {
        while (cursor != NULL)
        cursor = table[i];
    {
    for (int i = 0; i < TABLE_SIZE; i++)
    node *cursor = NULL;
    node *tmp = NULL;
    // TODO
{
bool unload(void)
// Unloads dictionary from memory, returning true if successful else false
}
    return counter;
    // TODO
{
unsigned int size(void)
// Returns number of words in dictionary if loaded else 0 if not yet loaded
}
    return true;
    fclose(file);
    }
        }
            table[index] = newNode;
            newNode->next = table[index];
        {
        else
        }
            table[index] = newNode;
        {
        if (table[index] == NULL)
        int index = hash(wordlist);
        newNode->next = NULL;
        strcpy(newNode->word, wordlist);
        }
            return 1;
        {
        if (newNode == NULL)
        node *newNode = malloc(sizeof(node));
        counter++;
    {
    while (fscanf(file, "%s", wordlist) != EOF)
    char wordlist[LENGTH + 1];
    }
        return false;
        fprintf(stderr, "There has been an error");
    {
    if (file == NULL)
    FILE *file = fopen(dictionary, "r");
    // TODO
{
bool load(const char *dictionary)
// Loads dictionary into memory, returning true if successful else false
}
    return hashvalue;
    }
        hashvalue = (hashvalue * tolower(word[i])) % TABLE_SIZE;
        hashvalue += tolower(word[i]);
    {
    for (int i = 0; i < strlen(word); i++)
    unsigned int hashvalue = 0;
    // TODO
{
unsigned int hash(const char *word)
// Hashes word to a number
}
    return false;
    }
        }
            return true;
        {
        if (strcasecmp(temp->word, word) == 0)
    {
    for (node *temp = cursor; temp != NULL; temp = temp->next)
    node *cursor = table[index];
    int index = hash(word);
    // TODO
{
bool check(const char *word)
// Returns true if word is in dictionary else false
node *table[TABLE_SIZE];
// Hash table
const unsigned int TABLE_SIZE = 50000;
// Number of buckets in hash table